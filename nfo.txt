This library works by polling various 'peripherals', namely buttons, quadrature rotary encoders, and faders. The library has build in debouncing / smoothing for buttons and encoders, and a user-setting for hysteresis for faders.  There is also an interface for motorized faders, utilising an H-bridge motor driver (L298N HBridge (or similar) with 3.3V logic).

The buttons are all one object, and are wired in a specific order (up to a max imum of 13).
They are wired, in order:
22,23,9,10,7,11,12,28,27,16,17,19,18

So, for 4 buttons, you need one object:
Switches myBUTTONS (4); // 4 is the number of buttons, B1 is on pin 22, B2 is on pin 23 ...

For encoders, each encoder is a separate object (up to a max of 4):
Rotary myENCODER1 (2, 5); // 2 and 5 are the left and right pins respectively
Rotary myENCODER2 (3, 4);

Each fader is a separate object (up to a max of 4):
Fader myFADER (A1, 4) // A1 is the analog read pin, and 4 is the amount of hysteresis jitter-suppression

If there is an event (e.g. a leading edge of a button), a user callback is executed. You get the idea.
For the motor, there is a "halt" command, and a "move to command".

Here are the callback 'sethandles" (see the "simple_example", for how this works in practice): 





NOTES FOR EXAMPLE myController13

1 Rotary encoder, with pushbutton switch (Adafruit 24 step)
1 Motorised fader, linear 10K from Sparkfun 
1 L298N HBridge (or similar) with 3.3V logic and a 9v power supply 
1 Joystick (4 switches) and 9 other switches / buttons

2 x 2 Midi interface (see https://www.pjrc.com/teensy/td_libs_MIDI.html)

A Teensy 3.2!
Frank B's connector board (see https://oshpark.com/shared_projects/0T6ZdhhG)
macaba's usb B connector board (see https://oshpark.com/shared_projects/eDlPs3sD) 
a hole-through usb B receptacle

3 different modes, chosen on startup by button press. Also, chosen in the .ino: the mode select buttons (17,19,18 are default), hysteresis (fader deadspot), touch sensitivity (fader touch sensitivity).

MODE1.MidiController/USB Midi interface (17). 
MODE2.Faderport clone                   (19). 
MODE3.MAME controller                   (18). 

Because MAME uses keystrokes, a custom usb type of keyboard/midi is needed. To make a custom usb type, replace your current usb_desc.h file with the one in the repository. On Windows 7, usb_desc.h is found in: 

[arduino install]/hardware/teensy/avr/cores/teensy3/

Then, use the MIDI type in the Arduino IDE dropdown USB Type menu for compiling.

Also, Arduino MIDI 4.2 library is required, in your arduino libraries folder, if using the Midi interface.

The myController13.h and .cpp go in your arduino libraries folder, too, in a folder named "myController13".

Wiring

Wiring	  Teesny	MODE1		MODE2		MODE3
Fader1	  3.3V
Fader3	  AGND
Fader2	  A14		Pitchbend	FaderPort
FaderT	  33
HBrdgEN
HBrdgI1
HBrdgI2
JstickD   22,GND			TrkDn		KEY_DOWN
JstickU	  23,GND			TrkUp		KEY_UP 
JstickL	  9,GND 			TrkL		KEY_LEFT
JstickR	  10,GND			TrkR		KEY_RIGHT 
SWTCH3	  13,GND			6		KEY_A
SWTCH2	  11,GND			1		KEY_B 
SWTCH5	  12,GND 			5		KEY_C
SWTCH1	  28,GND			3       	KEY_D		 
SWTCH4	  27,GND 			4       	KEY_E
RtrySWTCH 16,GND			7       	KEY_ENTER
Sselect3  17,GND 			10      	KEY_M
Sselect1  19,GND			9       	KEY_F1
Sselect2  18,GND			8       	KEY_F5
RtryL     2		PanL
RtryR     14		PanR

MMCSTOP, MMCPLAY, MMCFFWD, MMCRWD, MMCPUNCHIN, MMCPUNCHOUT, MMCPAUSE



